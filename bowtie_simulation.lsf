closeall;

# creating bowtie group
switchtolayout;
groupscope("::model::bowtie");
delete;
groupscope("::model::substrate");
delete;
select("::model::mesh_waveguide");
delete;
select("::model::source");
delete;
groupscope("::model");

# list variables
# bowtie
b_index = 1.4;
b_material = "Ag (Silver) - CRC";
b_x_span = 0.5e-06;
b_y_span = 0.5e-06;
b_z_span = 0.5e-06;
b_radius = 0.5e-06;
b_n_sides = 3;
b_res_corner = 10;
b_d_cavity = 0.1e-06;
b_radius_corner = 0.1e-06;
b_z_min = 0;
b_z_max = b_z_min + b_z_span;

b_x_min = -b_x_span-b_d_cavity/2;
b_x_max = b_x_span+b_d_cavity/2;
b_y_min = -b_y_span/2;
b_y_max = b_y_min + b_y_span;

# substrate
s_index = 1.4;
s_material = "Ag (Silver) - CRC";
edge_offset = 0.5e-6;
s_x_max = b_x_max + edge_offset;
s_x_min = b_x_min - edge_offset;
s_y_max = b_y_max + edge_offset;
s_y_min = b_y_min - edge_offset;
s_z_span = b_z_span;
s_z_max = b_z_min;
s_z_min = s_z_max - s_z_span;

## Parameters used for the signal analysis
t_sources_finished = 200e-15;	#< The signal before this time is discarded for the analysis
f_analysis=[c/1.05e-6, c/0.95e-6];     #< Frequency interval to search for resonances


## Specify mesh resolution 
target_dx = 1e-6/40;        	#< Target 40 cells per um in the refined regions
dx = b_z_span / round(b_z_span/target_dx); 	#< Make sure that actual dx is close to target but commensurate with the unit cell


# adding bowtie group
addstructuregroup;
set("name", "bowtie");
set("x", 0);
set("y", 0);
set("z", 0);
# simplify variable names by removing spaces
# variables
adduserprop("index", 0, b_index);
adduserprop("material", 5, b_material);
adduserprop("x span", 2, b_x_span);
adduserprop("z span", 2, b_z_span);
adduserprop("z max", 2, b_z_max);
adduserprop("z min", 2, b_z_min);
adduserprop("radius", 2, b_x_span);
adduserprop("n sides", 0, b_n_sides);
adduserprop("res corner", 0, b_res_corner);
adduserprop("d cavity", 2, b_d_cavity);
adduserprop("radius corner", 2, b_radius_corner);
set("construction group",1);

# bowtie script
bowtie_script = "
deleteall;
##############################################
# N-sided equilateral polygon with rounded corners
# An extruded polygon with n sides of equal length.
# Each corner is rounded by a radius and resolution.
#
# Input properties
# index: index of refraction for dielectric
# material: material of object
# z span: thickness of extrusion
# radius: length of each vertice to the center
# n sides: number of sides (ie =triangle, 4=square)
# res corner: number of vertices to approximate roundness by
# radius corner: radius of rounded corner
#
# Tags: polygon extrusion n-sided equilateral rounded corners
#
# Copyright 2010 Lumerical Solutions Inc
##############################################

# simplify variable names by removing spaces
x_span = %x span%;
z_span = %z span%;
z_max = %z max%;
z_min = %z min%;
radius = %radius%;
n_sides = %n sides%;
res_corner = %res corner%;
radius_corner = %radius corner%;
d_cavity = %d cavity%;

V=matrix(2,res_corner*n_sides);  # vertices of polygon
for (i=1:n_sides) {  # for each corner
  # calculate center of corner circle
  x_corner_center = (radius-radius_corner)* cos( (i-1)* 2*pi/n_sides);
  y_corner_center = (radius-radius_corner)* sin( (i-1)* 2*pi/n_sides);

  # calculate curve of corner
  theta= (i-1)*2*pi/n_sides + linspace(-2*pi/n_sides/2,2*pi/n_sides/2,res_corner);
  x_corner_tmp= x_corner_center + radius_corner*cos(theta);
  y_corner_tmp= y_corner_center + radius_corner*sin(theta);

  # save values in vertices variable
  V(1,1+(i-1)*res_corner:i*res_corner) = x_corner_tmp;
  V(2,1+(i-1)*res_corner:i*res_corner) = y_corner_tmp;
}

# add polygon
addpoly;

set(\"x\",-x_span-d_cavity/2);
#set(\"radius\",radius);
set(\"y\",0);
set(\"z\",0);
set(\"vertices\",V);
set(\"z max\",z_max);
set(\"z min\",z_min);
set(\"material\",material);
if(get(\"material\")==\"<Object defined dielectric>\") 
  { set(\"index\",index); } 
  
addpoly;
set(\"x\",x_span+d_cavity/2);
#set(\"radius\",radius);
set(\"y\",0);
set(\"z\",0);
set(\"vertices\",V);
set(\"z max\",z_max);
set(\"z min\",z_min);
set(\"material\",material);
set(\"first axis\",3);
set(\"rotation 1\",180);
if(get(\"material\")==\"<Object defined dielectric>\") 
  { set(\"index\",index); }";

# insert script within structure group
set('script',bowtie_script);

# adding substrate group
addstructuregroup;
set("name", "substrate");
set("x", 0);
set("y", 0);
set("z", 0);
# simplify variable names by removing spaces
# variables
adduserprop("index", 0, s_index);
adduserprop("material", 5, s_material);
adduserprop("x max", 2, s_x_max);
adduserprop("x min", 2, s_x_min);
adduserprop("y max", 2, s_y_max);
adduserprop("y min", 2, s_y_min);
adduserprop("z span", 2, s_z_span);
adduserprop("z max", 2, s_z_max);
adduserprop("z min", 2, s_z_min);
set("construction group",1);

substrate_script = "
deleteall;

x_max = %x max%;
x_min = %x min%;

y_max = %y max%;
y_min = %y min%;

z_span = %z span%;
z_max = %z max%;
z_min = %z min%;

addrect;
set(\"x\",0);
set(\"y\",0);
set(\"z\",0);

set(\"z max\",z_max);
set(\"z min\",z_min);
set(\"x max\",x_max);
set(\"x min\",x_min);
set(\"y max\",y_max);
set(\"y min\",y_min);
set(\"material\",material);
if(get(\"material\")==\"<Object defined dielectric>\") 
  { set(\"index\",index); }";

# insert script within structure group
set('script',substrate_script);

addmesh;
set("name","mesh_waveguide");
# set dimension
set("based on a structure", 1);
set("structure", "bowtie");
set("z span", 7e-7);
#set("z min",b_z_min);
#set("z max",b_z_max);
# enable in X direction and disable in Y,Z directions
set("override x mesh",1);
set("override y mesh",0);
#set("override z mesh",0);
# restrict mesh by defining maximum step size
set("set maximum mesh step",1);
set("dx",5e-9);



# adding source 
addtfsf;

set("injection axis","z");
set("direction","backward");
set("x",0);
set("x span",2e-6);
set("y",0);
set("y span",2e-6);
set("z",0);
set("z span",0.5e-6);
set("wavelength start",0.3e-6);
set("wavelength stop",1.2e-6);

